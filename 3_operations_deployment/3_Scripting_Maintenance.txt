SCRIPTING

After successfully login a program called bash open up, all the command you insert is interpreted by bash which figures out what it needs to happen to execute your command.

Bash is also called a command Interpreter.

$ date
Mon Dec 6 ...

In this case we are using iteractively. We enter the command date and we wait for a result. But bash can be used with scripts as well. Scripts are just file where we can insert multiple instruction for our command interpreter

So we can create a file called script.sh

>>
#!/bin/bash
<<

The #!/bin/bash is necessary to make the script work. #! is called shebang


>>
#!/bin/bash

# Log the date and the time the script was last executed

date >> /tmp/script.log
cat /proc/version >> /tmp/script.log

<<

The # at the start of a line mark that line as a comment
date >> /tmp/script.log we write this command the same way we can add it on the command line.
/proc/version is a special file that has detailed information about the current Linux kernel version. That is running on our operating system.

To make our script run we first need to make it executable

If we want only the owner of the file to be able to execute it. We have to add this permission

$ chmod u+x script.sh

Or if we want everyone to be able to execute it, we have to add this permission

$ chmod +x script.sh

To execute it we can simply write down the script path

$ /home/aaron/script.sh 

or

$ ./script.sh

In this case "./" the dot "." represnets the current directory.
To see all what is available by using script you can just type:

$ help


For now let's focus on if and test
So let's create a new script to archive the contents of the /etc/dnf directory

>>
#!/bin/bash

tar acf /tmp/archive.tar.gz /etc/dnf

<<


Then let's  make it executable 

$ chmod +x archive-dnf.sh

$ ./archive-dnf.sh

But we can make our script smarter we can make it implement the following logic first to check to see if the /tmp/archive.tar.gz exists using the IF and in case rename the file into

/tmp/archive.tar.gz.old

before creating the new one

To see how to use if and test, simply type:

$ help if

$ help test

>>
#!/bin/bash

if test -f /tmp/archive.tar.gz; then 
	mv /tmp/archive.tar.gz /tmp/archive.tar.gz.old
	tar acf /tmp/archive.tar.gz /etc/dnf
else
	tar acf /tmp/archive.tar.gz /etc/dnf
fi


<<

 test -f /tmp/archive.tar.gz;
We add the semicolon ";" at the end of the condition we want to verify.

Every command returns 0 if everything goes well and a number different than 0 if it encountered some errors. if the command returns 0 everything goes well and it's true. If the command return a number larger then 0 some error occurs and is represented as false


So we can write soemthing like this:

>>
#!/bin/bash

if grep -q '5' /etc/default/grub; then 
	echo 'Grub has timeout of 5 seconds'	
else
	echo 'Grub does not have a timeout of 5 seconds.'
fi

<<

N.B
If you need a quick refrech on how script works you can check this file

$ cat /etc/cron.jourly/0anacron


