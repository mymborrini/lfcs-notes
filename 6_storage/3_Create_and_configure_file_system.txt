Create and Configure File System

To store files and directories inside a partition, first we need to create a file system on it.
By default, Red Hat operating systems use the xfs file system and ubuntu use the ext4 file system. To format a partition with xfs file system, the simples
command we can use is this

$ sudo mkfs.xfs /dev/sdb1

/dev/sdb1 is the partition we are targeting

To create an ext4 file system

$ sudo mkfs.ext4 /dev/sdb1

Any file system has settings that we can adjust with the commands above. We can see what file system settings can be changed b reading the commands manual

$ man mkfs.xfs


For example we can see that we have the -L option to choose a label for this file system
We press forward slash (/) then type -L to search for it and then we press N to find the next one.

Let's set the label to backup volume.

Let's do a quick listing to see our file system

$ sudo fdisk -l
...

Then we can apply the label

$ sudo mkfs.xfs -L "BackupVolume" /dev/sdb1
meta-data=/dev/sdb1         isize=512       agcount=4,  agsize=262144 blks
         =                  sectsz=512      attr=2,   projid32bit=1
         =                  crc=1           finobt=1,  sparse=1,  rmapbt=1
         =                  reflink=1       bigtime=1  inobtcount=1  nrext64=0
data     =                  bsize=4096      blocks=1048576, imaxpct=25
         =                  sunit=0         swidth=0    blks
naming   =version 2         bsize=4096      ascii-ci=0,     ftype=1
log      =internal log      bsize=4096      blocks=16384,  version=2
         =                  sectsz=512      sunit=0  blks, lazy-count=1
realtime =none              extsz=4096      blocks=0, rtextents=0

Note how it shows us the default options that is used to create this file system. Instead of going through the manual, we also have a quicker way
to look at adjustable file system options  for xfs.

If we simply run the commands without any argument we will have a complain that no device name was specified but we see a lot of options as well

$ sudo mkfs.xfs
No device name specified
Usage: mkfs.xfs
/* blocksize */         [-b size=num]
...
/* inode size */        [-i perblock=n|size=num,maxpct=n,attr=0,1,2,projid32bit=0|1,sparse=0|1,nrext64=0|1]
...
/*label*/               [-L label (maximum 12 charachters) ]
...

We can see that we can choose a cutom inode size.

In an inode this such as file attributes are stored for example file creation date etc...
So with larger inode sizes we can store more attributes such as extended attributes.
So for example if we want to have an inode of 512 bytes we can write something like this:

$ sudo mkfs.xfs -i size=512 /dev/sdb1
mkfs.xfs: /dev/sdb1 appears to contain an existing filesystem (xfs) .
mkfs.xfs: Use the -f option to force overwrite

In this case the utility complains that a filesystem already exists because of what we did earlier. If we're certain we don't need the data on this partition
and we just want to overwrite whatever exists there, we can force a format with the -f option.

$ sudo mkfs.xfs -f -i size=512 /dev/sdb1

$ sudo mkfs.xfs -f -i size=512 -L "BackupVolume" /dev/sdb1


Now if we press:

$ xfs <tab>
...
xfs_admin

We can see a lot of xfs utility, xfs_admin for example can be used to change things on an existing filesystem. For example imagine we have to change the label of
this filesystem

$ sudo xfs_admin -L "FirstFS" /dev/sdb1


Now let's take a look on ubuntu filesystem ext4, so similar of what we did Before

$ man mkfs.ext4

A quick way to see all available options is simply to type the command and press enter

$ mkfs.ext4

To create a mkfs.ext4 filesystem with default options we type something like this:

$ sudo mkfs.ext4 /dev/sdb2
Creating filesystem with 1048576 4k blocks and 262144 inodes
Filesystem UUID: 4567887achnjklfnqjwv
Superblock backups stored on blocks:
    32768, 98304, 163840, 229376, 294912, 819200, 884736

Allocating group tables: done
Writing inode tables: done
Creating journal (16384 blocks): done
Writing superblocks and filesystem accounting information: done

If we try to run the command again

$ sudo mkfs.ext4 /dev/sdb2
/dev/sdb2 contains a ext4 file system created on ...
Proceed anyway? (y,N)


This is a good way to know that you're not overwriting a filesystem by accident

To pick a specific number of inodes we would type in this:

$ sudo mkfs.ext4 -N 500000 /dev/sdb2

On ext4 a weird thing can happened.
We can have hundreds of gigabytes of free space, but discover that we can't create any new files. That's because we can run out of inodes.
Each file or directory uses an inode, and if we run out of inodes, then no more files or directories can be created.

Now on a system where we expect to create many small files, we can choose a large number.
With xfs we have xfs_admin to change properties of an existing filesystem.

For ext4 as you can see from the manual and we see in other utility that tune2fs is the utility we need, we can press the following to see the properties
of an ext4 filesystem

$ sudo tune2fs -l /dev/sdb2
....

tune2fs is also used to change the properties for example the label

$ sudo tune2fs -L "SecondFS" /dev/sdb2



Now if we run cfdisk we examine our /dev/sbd device and verify

$ sudo cfdisk /dev/sdb

Disk: /dev/sdb
Size: 10 GiB, 10737418240 bytes, 20971520 sectors
Label: gpt, identifier: ikfweueviow;vew

        Device          Start               End             Sectors             Size        Type
>>      /dev/sdb1       2038            8390655             8388608               4G        Linux filesystem
        /dev/sdb2    8390655           16779263             8388608               4G        Linux filesystem
        /dev/sdb3   16779264           20971486             4192223               2G        Linux swap


    Partition UUID: 27893yr9njkwenkjewcv
    Partition type: Linux filesystem
    Filesystem UUID: 67327rhjbfbjlwjvkwe'v239
    Filesystem LABEL: FirstFS
    Filesystem: xfs

---

Disk: /dev/sdb
Size: 10 GiB, 10737418240 bytes, 20971520 sectors
Label: gpt, identifier: ikfweueviow;vew

        Device          Start               End             Sectors             Size        Type
        /dev/sdb1       2038            8390655             8388608               4G        Linux filesystem
>>      /dev/sdb2    8390655           16779263             8388608               4G        Linux filesystem
        /dev/sdb3   16779264           20971486             4192223               2G        Linux swap


    Partition UUID: 2egvwevwerwekwenkjewcv
    Partition type: Linux filesystem
    Filesystem UUID: 67327ravwevwevwwe'v239
    Filesystem LABEL: SecondFS
    Filesystem: ext4




CONFIGURE SYSTEMS TO MOUNT FILESYSTEMS AT OR DURING BOOT

We created a file system but there is no way for us to access that filesystem. How do we create files and directories in them? To make a filesystem
accessible we first have to mount it. Mounting basically means attaching or plugging in a file system to one of our directories.

How to do it?

First, we can take a look at a directory often used for temporarily mounting a random file system.

$ ls /mnt/

Now this is currently empty, but let's say we want to mount the xfs file system created before.
This is stored on the partition /dev/sdb1

Now we mount it

$ sudo mount /dev/sdb1 /mnt/

Now we can create a file

$ sudo touch /mnt/testfile

$ sudo ls /mnt
testfile

We can use the lsblk  to see that our partition is mounted

$ lsblk
NAME                        MAJ:MIN     RM          SIZE        RO      TYPE            MOUNTPOINTS
sda                           8:0       0           45G         0       disk
|-- sda1                      8:1       0            1M         0       part
|-- sda2                      8:2       0            2G         0       part            /boot
|-- sda3                      8:3       0           43G         0       part
    |-- ubunut-vg-ubuntu-lv 252:0       0         21.5G         0       lvm             /
sdb                           8:0       0           45G         0       disk
|-- sdb1                      8:1       0            1M         0       part            /mnt
|-- sdb2                      8:2       0            2G         0       part
|-- sdb3                      8:3       0           43G         0       part
sr0                          11:0       1         1024M         0       rom

To unmount a filesystem, we use the unmount command

$ sudo unmount /mnt/

If now we check the /mnt directory we see there is nothing inside it, it's empty

$ sudo ls /mnt


We notice that in the lsblk command, some filesystem on some partition are already mounted. For instance /dev/sda2 is mounted in the boot directory.
When a Linux operating system boots up, it automatically mounts some filesystem

Let's see how we can make it mount our xfs filesystem at /dev/sdb1

First we create a directory that we want to use as a mounting point

$ sudo mkdir /mybackups/

Then /etc/fstab is the file where we can define what should be mounted automatically when the system boots up.

$ sudo vim /etc/fstab

/dev/sda2       /boot       ext4        defaults        0       1



A line in fstab has six fields:
The first (/dev/sda2) usually points to the block device file that represents a partition, or some kind of storage. We're telling Linux mount the file system contained at the
partition at /dev/sdb1

The second (/boot). This will be the directory where we want to mount our file system, which is /mybackups/

The third field (ext4) we specify the filesystem type. xfs in our case. But if we'd want to auto mount /dev/sdb2 instead of /dev/sbd1 we'd type ext4.

THe fourth field (defaults) will contain the mount options

The fifth field (0) determines if a utility called dump should back up this file system. 0 means backup disabled, 1 means backup enabled. Dump is rarely
used these days so we simply set it to 0

The sixth field (1), filesystems can sometimes get corrupted and the last field decides what happens when errors are detected. We can have three values:
0,1,2.
0 means the filesystem should never be scanned for errors, 1 means this filesystem should be scanned first for errors before the other ones. Two means this
file system should be scanned after the ones with a value of 1 have been scanned.
In practice we should often write one here for the root filesystem where the operating system is installed, and we should write 2 for all the other
operating systems


$ sudo vim /etc/fstab

/dev/sda2       /boot       ext4        defaults        0       1
/dev/sda1       /mybackups  xfs         defaults        0       2

So the second line will be the one we write.

Once you complete you can apply it immesdiatly (useful in exam so you can also test it)

$ sudo mount -a

If we don't want to reboot the system

$ sudo systemctl daemon-reload

Now if we look at this directory

$ ls /mybackups/

is empty

and lsblk will show that nothing is mounted in /mybackups

$ lsblk
NAME                        MAJ:MIN     RM          SIZE        RO      TYPE            MOUNTPOINTS
sda                           8:0       0           45G         0       disk
|-- sda1                      8:1       0            1M         0       part
|-- sda2                      8:2       0            2G         0       part            /boot
|-- sda3                      8:3       0           43G         0       part
    |-- ubunut-vg-ubuntu-lv 252:0       0         21.5G         0       lvm             /
sdb                           8:0       0           45G         0       disk
|-- sdb1                      8:1       0            1M         0       part
|-- sdb2                      8:2       0            2G         0       part
|-- sdb3                      8:3       0           43G         0       part
sr0                          11:0       1         1024M         0       rom


But if we reboot

$ sudo systemctl reboot

$ ls -l /mybackups/
testfile

We see that in mybackups folder a file named testfile (the file we created before) exists.
Also lsblk shows that the mounting has taken place


$ lsblk
NAME                        MAJ:MIN     RM          SIZE        RO      TYPE            MOUNTPOINTS
sda                           8:0       0           45G         0       disk
|-- sda1                      8:1       0            1M         0       part
|-- sda2                      8:2       0            2G         0       part            /boot
|-- sda3                      8:3       0           43G         0       part
    |-- ubunut-vg-ubuntu-lv 252:0       0         21.5G         0       lvm             /
sdb                           8:0       0           45G         0       disk
|-- sdb1                      8:1       0            1M         0       part            /mybackups
|-- sdb2                      8:2       0            2G         0       part
|-- sdb3                      8:3       0           43G         0       part
sr0                          11:0       1         1024M         0       rom


In fstab always remember, if don't remeber something you can always use

$ man fstab



Now, we created also a swap partition. It could be useful if this would be mounted automatically at boot time.

So we edit fstab again and we add this line:


$ sudo vim /etc/fstab

/dev/sda2       /boot       ext4        defaults        0       1
/dev/sdb1       /mybackups  xfs         defaults        0       2
/dev/sdb3       none        swap        defaults        0       0


The second field should normally contain the mount point, the directory in a filesystem it should be mounted in. But we specify none here,
since swap is not meant to be mounted in any directory.

In the filesystem type we specify for swap and the last two fields are 0 0  since swap is not meant to backup or scanned for errors.

If we reboot

$ swapon --show
NAME        TYPE        SIZE        USED        PRIO
/dev/sdb3   partition     2G          0B          -2


In the /etc/fstab we can also see lines like the following

/dev/disk/by-uuid/weuihfiuwhie1-2390328302      /boot       ext4    defaults        0       1

In this case a uuid is used instead of the block device.

Imagine a real server with two ssds connected to some sata ports on the motherboard. If we switch the hardware and connect the first ssd to the second
sata port and vice-versa we will mount the wrong partition, because now the names changes.

To check the UUID of a block device we can use this command:

$ sudo blkid /dev/sdb1
/dev/sdb1 LABE="FirstFS" UUID="tyqwfgdyuq182677812" BLOCK_SIZE="512" TYPE="xfs" PARTUUID="uqifhiuqhiuf1902012"